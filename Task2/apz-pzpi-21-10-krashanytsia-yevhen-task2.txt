1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Як було зазначено вище, серверна система реалізована за допомогою мови програмування JavaScript, з використанням Node JS та фреймворку Express. На ньому знаходиться частина бізнес логіки.
База даних була створена за допомогою СУБД PostgreSQL. Її використання було обумовлено великою спільнотою, завдяки якій вона є дуже підтримуваною та розвиненою. Також вона підтримує стандарти SQL, що дозволяє використовувати або переносити данні с інших СУБД, підтримає ACID-властивості, що надає надійність транзакцій, підтримка SSL, що забезпечує безпеку передачі інформації між сервером та клієнтом, та можливість підтримувати гігантські об’єми даних, що дозволяє легко її масштабувати.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Діаграма розгортання необхідна щоб побачити як компоненти системи будуть взаємодіяти між собою. За її допомогою програмісти розуміють як система буде взаємодіяти між собою та с зовнішніми пристроями.
На ній ми бачимо що система складається з 5 компонентів:
•	Серверу, який буде відповідний за логіку сайту;
•	Клієнту, через який користувачі будуть взаємодіяти з сервером;
•	Бази даних, у якій зберігається уся інформація;
•	Мобільного додатку, який буде підключатись до IOT пристрою та керувати ним;
•	IOT- пристрій який представляє собою розумну аудіо систему яка вбудована у гітару, та якою можна буде керувати з телефону. 
У якості бази даних було обрано СУБД PostrgeSQL. Її було обрано через легкість у використанні, масштабованість при великій кількості даних, та просте розгортання на хмарних сервісах.
Для створення серверу було обрано JavaScript з використанням NodeJs та та фреймворк Express. Такі технології допоможуть при з’єднанні з клієнтською частиною за допомогою REST API.
Клієнтська частина створена за допомогою бібліотеки React, яка покращує взаємодію з REST API, та допомагає створити гарніший дизайн. Її можна використовувати у будь якому браузері, що має підключення до інтернету.
Мобільний додаток розроблюється з використання мови програмування Kotlin, та його можна буде завантажити на будь який андроїд пристрій. 


3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ
Посилання на відео: https://youtu.be/jn_IjtCQqqs 
Серверна частина відповідає за частину бізнес логікі, яка відповідна за додавання нових користувачів, додавання вакансій або резюме, та підтвердження або відмова на вакансії або резюме. Також вона має REST API інтерфейс, за допомогою якого інші частини системи можуть взаємодіяти з додатком. Сервер побудований за принципом чистої архітектури, сутність якої полягає у розподіленні на рівні абстракції, для цього я використовую MVC архітектуру, у якій існує модель бази даних, та контролери які відповідають за свою частину бізнес логіки, та не пересікаються з іншими. Такий підхід дозволяє використовувати принцип SOLID, а саме Single Responsibility Principle, який стверджує що кожна частина програми повинна бути відповідальною за певну бізнес логіку, та змінюватись тільки для зміни цієї бізнес логіки. Сервер взаємодіє з базою даних за допомогою бібліотеки Sequelize, яка дозволяє як відправляти прями запити, так і використовувати ORM для взаємодії.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Для опису поведінки користувача у системі, необхідно створити UML-діаграму прецедентів, на якій будуть відображатись усі користувачі, та їх можливості у системі.
Як ми бачимо у системі може існувати 3 види користувачів:
•	Незареєстрований користувач, який може тільки продивлятись товари та зареєструватись;
•	Зареєстрований користувач, він може так само переглядати товари, але на відмін від незареєстрованих також може додавати їх до кошика, та оформлювати замовлення;
•	Адміністратор це люде яка може адмініструвати сайт, він має можливість додавати товари та категорії, може видаляти їх, та керувати за користувачами та видаляти їх за необхідністю. 
Усі користувачі зможуть проводити пошук або фільтрацію по резюме або вакансіям, що дозволить пришвидшити знаходження гарної вакансії.
При збереженні вакансій або резюме, власнику на пошту буде приходити лист з оповіщенням, що його резюме зацікавились.



5 ПОБУДОВА ER-ДІАГРАМИ

ER-діаграма використовується для візуалізації зовнішнього вигляду бази даних. Вона показує відносини між таблицями. Моя ER-діаграма складається з п’яти сутностей. У кожній відстежується час створення даних у сутності, та час їх оновлення. Це дозволить відстежувати зміни у бд, що покращить безпеку даних у ній. 
ER-діаграма містить наступні сутності:
•	Users. У якій зберігається уся інформація про користувачів;
•	Guitar. У якій зберігається уся інформація про гітари які були створені, вона пов’язана з сутністю Users зв’язком один до багатьох;
•	Categories. У якій зберігається уся інформація про категорії які були створені, вона пов’язана з сутністю Guitar зв’язком один до багатьох;
•	Orders. У цій сутності зберігається інформація про кошик які користувач зберіг, та відстежується їх статус. Вона пов’язує сутності Users зв’язком один до багатьох;
•	OrderDetails. У цій сутності зберігається інформація про товари які були збережені у кошику які користувач зберіг, та відстежується їх статус. Вона пов’язує сутності Orders зв’язком один до багатьох.

6 СПЕЦИФІКАЦІЯ REST

REST це архітектурний стиль для створення розподілених веб-систем. Свторімо REST специфікацію для серверної частини програмної системи (див. додаток А). REST специфікація допоможе визначити доступні маршрути, та їх призначення.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Діаграма компонентів використовується для відстеження взаємодії компонентів всередині системи. З її допомогою програмісти будуть бачити як саме виконується система та взаємодії у ній. На ній ми бачимо процес оформлення замовлення
При введені даних користувачем, для чого він використовує веб застосунок, вони відправляються на сервер, де оброблюються та передаються до бази даних. 


ВИСНОВКИ

На лабораторній роботі я розробив серверну частину програмної системи, реалізував бізнес логіку, створив базу даних, навчився використовувати REST API. Створив UML-діаграму розгортання, прецедентів, компонентів та ER-діаграму бази даних.

ДОДАТОК А
Специфікація REST
Операції над користувачами
1.Контролер: Користувач
Метод: GET
Посилання: /api/user/auth/id
Опис: Повертає користувача
2.Контролер: Користувач
Метод: POST
Посилання: /api/user/registration
Опис: Виконує реєстрацію користувача
3.Контролер: Користувач
Метод: POST
Посилання: /api/user/login
Опис: Виконує авторизацію користувача
Операції над гітарами
1.Контролер: Гітара
Метод: GET
Посилання: /api/guitar/all
Опис: Повертає всі гітари та дозволяє фільтрувати їх
2.Контролер: Гітара
Метод: GET
Посилання: /api/guitar/search
Опис: Виконує пошук по гітарам
3.Контролер: Гітара
Метод: GET
Посилання: /api/guitar/id
Опис: Повертає обрану гітару
4.Контролер: Гітара
Метод: POST
Посилання: /api/guitar/create
Опис: Створює нову гітару
5.Контролер: Гітара
Метод: POST
Посилання: /api/guitar/createcat
Опис: Створює нову категорію
6.Контролер: Гітара
Метод: DELETE
Посилання: /api/guitar/delete/id
Опис: Видаляє обрану гітару
Операції з замовленням
1.Контролер: Замовлення
Метод: GET
Посилання: /api/order/all
Опис: Повертає усі замовлення
2.Контролер: Замовлення
Метод: GET
Посилання: /api/order/id
Опис: Повертає обраний товар з замовлення
3.Контролер: Замовлення
Метод: POST
Посилання: /api/order/createorder
Опис: Створює замовлення
4.Контролер: Замовлення
Метод: DELETE
Посилання: /api/order/deleteorder/id
Опис: Видаляє товар з замовлення
